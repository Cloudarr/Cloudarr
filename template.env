#CLOUDARR PRIMARY CONFIG
#>Cloudarr is primarily configured by this .env file
#>Configuration of the homepage dashboard can be done in the config.py/json file or if you set CLOUDARR_MANAGE_HOMEPAGE_SERVICES and CLOUDARR_MANAGE_HOMEPAGE_SETTINGS to false you can make changes to $CONFIGDIR/homepage/services.yaml amd settings.yaml yourself
#>Cloudarr comes with a built-in editor at ./env_editor.html that can be used to edit this file with a friendly interface
##Basic configuration
#Site name for site titles / homepage
SITE_NAME="MyCloud"
#This is your base domain, eg "example.com"
DOMAINNAME="example.com"
#Password used in a lot of places
CLOUDARR_ADMIN_PASSWORD="YOU_GOTTA_CHANGE_THIS_1234567890"
#Your timezone, find yours here https://en.wikipedia.org/wiki/List_of_tz_database_time_zones
TZ="America/Los_Angeles"
#Homepage container prefix, unless changed in Authelia envrionment variables this will be your landing page
HOMEPAGE_PREFIX="homepage"
#By default Cloudarr binds Gethomepage to ${DOMAINNAME} and ${HOMEPAGE_PREFIX}.${DOMAINNAME}
#To avoid binding to the base domain just use: "Host(`${HOMEPAGE_PREFIX}.${DOMAINNAME}`)"
HOMEPAGE_RULE="Host(`${DOMAINNAME}`) || Host(`${HOMEPAGE_PREFIX}.${DOMAINNAME}`)"
#Homepage web browser title
HOMEPAGE_TITLE="${SITE_NAME} Home"
#Cloudarr configuration directory, your docker container configs / appdata will be here.
CONFIGDIR="./config"
#Cloudarr logging dir, eventually this will be replaced with a container for log aggregation
LOGSDIR="./logs"
#[dark/light] Applies to several containers
CLOUDARR_THEME="dark"
##Cloudarr Automatic Configuration Settings
#>Cloudarr automatically generates configuration settings for a number of containers, you can disable this but you will have to manually manage the files if you do so.
#[true/false] Cloudarr's ./apply_config.py automatically generates Traefik's static configuration from $CONFIGDIR/traefik/traefik-template.yml to $CONFIGDIR/traefik/traefik.yml, if you disable this you will need to generate it yourself
CLOUDARR_MANAGE_TRAEFIK_STATIC="true"
#[true/false] Cloudarr's ./apply_config.py automatically generates Traefik's dynamic configuration from environment variables to $CONFIGDIR/traefik/dynamic-config.yml, if you disable this you will need to generate it yourself
CLOUDARR_MANAGE_TRAEFIK_DYNAMIC="true"
#[true/false] Cloudarr's ./apply_config.py automatically generates Authelia's configuration from $CONFIGDIR/authelia/configuration-template.yml to $CONFIGDIR/authelia/configuration.yml, if you disable this you sill need to generate it yourself
CLOUDARR_MANAGE_AUTHELIA="true"
#[true/false] Cloudarr's ./apply_config.py automatically generates GetHomepage's services configuration from cloudarr-config.yml to $CONFIGDIR/homepage/services.yaml, if you disable this you sill need to generate it yourself
CLOUDARR_MANAGE_HOMEPAGE_SERVICES="true"
#[true/false] Cloudarr's ./apply_config.py automatically generates GetHomepage's settings configuration from cloudarr-config.yml to $CONFIGDIR/homepage/settings.yaml, if you disable this you sill need to generate it yourself
CLOUDARR_MANAGE_HOMEPAGE_SETTINGS="true"
#[true/false] Cloudarr's ./apply_config.py automatically generates GetHomepage's settings configuration from cloudarr-config.yml to $CONFIGDIR/guacamole/postgres/init/initdb.sql, if you disable this you sill need to generate it yourself
CLOUDARR_MANAGE_GUACAMOLE_INITDB="true"
#EXPRESSVPN
#>ExpressVPN is only needed if you want to use the requesters stack
#ExpressVPN activation code, this only counts as one device towards your limit
EXPRESSVPN_ACTIVATION_CODE=""
#CLOUDFLARE
#>Cloudflare DDNS keeps requests pointed at your IP even if it changes.
#Cloudflare DDNS Config / Cert Config
CF_API_EMAIL=""
#See here about getting your token https://community.cloudflare.com/t/how-to-create-an-api-token-to-support-ddns-updates/117427
CF_API_KEY=""
CF_CERTS_DIR="./cloudflare_certs"
CF_CA_SERVER="https://acme-staging-v02.api.letsencrypt.org/directory"
#VAULTWARDEN
#>Vaultwarden is a self-hosted password manager
#VaultWarden prefix, it's common to change this to "bitwarden"
VW_PREFIX="vaultwarden"
#Set this to false after creating an admin account
VW_SIGNUPS_ALLOWED="true"
VW_WEBSOCKET_ENABLED="true"
VW_ADMIN_TOKEN=""
#LDAP-USER-MANAGER
#Set this to true after first run
#Enabled auto-logon for ldap user manager
LUM_REMOTE_HTTP_HEADERS_LOGIN="false"
#FOLDERS
##Media Library Folders
#>The folders will be created as named docker volumes.
#>If you change these paths after the initial launch you will need to delete the named volumes by downing the stack, running `sudo docker volume ls` to look up the named volume and then `sudo docker volume rm CONTAINERNAME`to delete it. Re-up the stack to re-create the named volume.
AUDIOBOOKSDIR="/mnt/BIGNAS/Audiobooks"
BOOKSDIR="/mnt/BIGNAS/Books"
DOCUMENTSDIR="/mnt/BIGNAS/Documents"
MOVIESDIR="/mnt/BIGNAS/Movies"
YTDLVIDEOSDOWNLOADSDIR="/mnt/BIGNAS/Movies/other"
MUSICDIR="/mnt/BIGNAS/Music"
YTDLMUSICDOWNLOADSDIR="/mnt/BIGNAS/Music/other"
PHOTOSDIR="/mnt/BIGNAS/Photos"
PODCASTSDIR="/mnt/BIGNAS/Podcasts"
SHOWSDIR="/mnt/BIGNAS/TV Shows"
#3D print (GCODE file dir)
PRINTSSDIR="/mnt/BIGNAS/Prints"
#3D models folder
MODELSDIR="/mnt/BIGNAS/Models"
#Gitea data folder
GITDIR="/mnt/BIGNAS/Git"
##Qbittorrent Download / Unpackarr Folders
DOWNLOADSDIR="./downloads/"
#AUTHELIA
AUTHELIA_PREFIX="authelia"
#At least 20 random alphanumeric chars
AUTHELIA_SESSION_SECRET=""
#At least 20 random alphanumeric chars
AUTHELIA_JWT_SECRET=""
#At least 20 random alphanumeric chars
AUTHELIA_STORAGE_ENCRYPTION_KEY=""
#At least 20 random alphanumeric chars
AUTHELIA_STORAGE_POSTGRES_PASSWORD=""
#Max length a session can last
AUTHELIA_SESSION_COOKIE_EXPIRATION="24 hour"
#Max length without session activity before login is required again
AUTHELIA_SESSION_COOKIE_INACTIVITY="1 hour"
#You can change the default Authelia landing point here
AUTHELIA_DEFAULT_REDIRECT_URL_PREFIX="$HOMEPAGE_PREFIX"
#Max password retries
AUTHELIA_MAX_RETRIES="10"
#Time to find failed logins
AUTHELIA_FIND_TIME="2 minutes"
#Ban time after failed logins
AUTHELIA_BAN_TIME="3 minutes"
#Authelia internal / external port
AUTHELIA_PORT="9091"
#OPENLDAP
#>These variables are use to set up openldap, ldap-user-manager, authelia, and guacamole
LDAP_ORGANISATION="example.com"
LDAP_BASE_DN="dc=example,dc=com"
LDAP_ADMIN_PASSWORD=""
LDAP_CONFIG_PASSWORD=""
LDAP_TLS_VERIFY_CLIENT="try"
LDAP_READONLY_USER="true"
LDAP_READONLY_USER_USERNAME="readonly"
LDAP_READONLY_USER_PASSWORD="readonly"
LDAP_RFC2307BIS_SCHEMA="true"
LDAP_BACKEND="mdb"
LDAP_REPLICATION="false"
LDAP_REMOVE_CONFIG_AFTER_SETUP="true"
#GRAFANA
GF_SECURITY_ADMIN_PASSWORD=""
GF_SECURITY_ADMIN_USER="admin"
GF_DATABASE_PASSWORD="Grafana123456Grafana"
#GUACAMOLE
GUACAMOLE_POSTGRESS_USER="guacamole_user"
GUACAMOLE_POSTGRESS_PASSWORD="guac123456guac"
#MINIFLUX
MINIFLUX_ADMIN_PASSWORD=""
MINIFLUX_POSTGRES_USER="miniflux_user"
MINIFLUX_POSTGRES_PASSWORD="miniflux123456miniflux"
#FDM MONSTER
FDM_MONSTER_MONGO_INITDB_ROOT_USERNAME="admin"
FDM_MONSTER_MONGO_INITDB_ROOT_PASSWORD=""
#GITTEA
GITEA_POSTGRESS_USER="admin"
GITEA_POSTGRESS_PASSWORD=""
GITEA_DISABLE_SSH="true"
#FLARESOLVERR
FLARESOLVERR_LOG_LEVEL="info"
FLARESOLVERR_CAPTCHA_SOLVER="none"
#API KEYS AND PASSWORDS
#>Many of these API keys, passwords, etc will need to be set after the first compse-up. They are used for a number of integrations, especially gethomepage. These values are used to populate the API keys for gethomepage widgets specified in config.json
#Gethomepage Portainer Integration
PORTAINER_API_KEY=""
#These API keys are used by gethomepage widgets, unpackarr, etc
BAZARR_API_KEY=""
JELLYSEERR_API_KEY=""
LIDARR_API_KEY=""
RADARR_API_KEY=""
READARR_API_KEY=""
SONARR_API_KEY=""
AUDIOBOOKSHELF_API_KEY=""
JELLYFIN_API_KEY=""
#AdGuard Username/Password must be set in AdGuard WebUI first
ADGUARD_USERNAME="admin"
ADGUARD_PASSWORD=""
#Kavita Username/Password must be set in Kavita WebUI first
KAVITA_USERNAME="admin"
KAVITA_PASSWORD=""
#Navidrome must be set up via WebUI first
#See more info here: https://gethomepage.dev/main/widgets/services/navidrome/
NAVIDROME_USERNAME="admin"
#You can use the interactive make_md5_password.py script included with Cloudarr to generate the salt / token
NAVIDROME_TOKEN=""
NAVIDROME_SALT=""
NAVIDROME_PROXYS="0.0.0.0/24,127.0.0.1/0"
#Gethomepage Qbittorrent config
#This does NOT set the qbit password
#See more info here:  https://gethomepage.dev/main/widgets/services/qbittorrent/
QBITTORRENT_USERNAME="admin"
QBITTORRENT_PASSWORD=""
#SERVICE PORTS
#>Cloudarr modifies some service ports from container defaults in order to prevent overlap conflicts
#These are the entrypoints into Cloudarr, you will want to forward these ports on your router.
#You probably shouldn't change these if you don't know what you're doing
TRAEFIK_PORT_HTTP="80"
TRAEFIK_PORT_HTTPS="443"
#To prevent deployment issues, AdGuard's DNS is bound to port 9053. Check the readme for details on disabling resolvd to host on port 53.
ADGUARD_DNS_PORT="9053"
LOKI_PORT="3100"
#Jellyfin http port
JELLYFIN_PORT="8096"
#Jellyfin https port
JELLYFIN_PORT_2="8920"
#This is exposed to allow local network management
PORTAINER_PORT="9000"
OPENLDAP_PORT="389"
OPENLDAP_LDAPS_PORT="636"
LDAP_USER_MANAGER_PORT="8785"
#This port is exposed on the VPN container so other containers can access it
QBT_PORT="3005"
#This port is exposed on the VPN container so other containers can access it
JELLYSEER_PORT="5055"
#This port is exposed on the VPN container so other containers can access it
UNPACKERR_PORT="5656"
#This port is exposed on the VPN container so other containers can access it
BITTORRENT_PORT="6881"
#This port is exposed on the VPN container so other containers can access it
NZBHYDRA_PORT="5076"
#This port is exposed on the VPN container so other containers can access it
RADARR_PORT="7878"
#This port is exposed on the VPN container so other containers can access it
SONARR_PORT="8989"
#This port is exposed on the VPN container so other containers can access it
BAZARR_PORT="6767"
#This port is exposed on the VPN container so other containers can access it
LIDARR_PORT="8686"
#This port is exposed on the VPN container so other containers can access it
READARR_PORT="8787"
#This port is exposed on the VPN container so other containers can access it
JACKETT_PORT="9117"
#This port is exposed on the VPN container so other containers can access it
FLARESOLVERR_PORT="8191"
