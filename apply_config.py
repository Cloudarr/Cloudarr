"""
This script builds the configurations for Traefik/Authelia/Homepage

Uses the following files to source the configuration:
 - ./.env
 - ./cloudarr-config.yml

Applies configuration to the following files:
 - ${CONFIGDIR}/traefik/traefik.yml
 - ${CONFIGDIR}/traefik/dynamic-config.yml
 - ${CONFIGDIR}/authelia/configuration.yml
 - ${CONFIGDIR}/homepage/services.yaml
 - ${CONFIGDIR}/homepage/settings.yaml

Should always be run with sudo
"""

import os
import traceback
from importlib.util import spec_from_loader, module_from_spec
from importlib.machinery import SourceFileLoader 
from copy import deepcopy

try:
  import yaml
except ModuleNotFoundError:
  raise ModuleNotFoundError("pyyaml is not installed - install with `sudo pip3 install pyyaml`")

warning = f"""
# GENERATED BY Cloudarr's apply_config.py
# MAKE CHANGES IN .env & config.py/config.json
"""

def apply_env(path, recursions=10):
  # Applies environment variables to a file
  with open(path) as f:
    contents = f.read()
  for _ in range(recursions):
    for k, v in env_map.items():
      contents = contents.replace(f"${k}" ,v).replace("${"+f"{k}"+"}" ,v)
  with open(path, "w+") as f:
    f.write(warning + contents)

# Loads environement variables from .env file
spec = spec_from_loader("env", SourceFileLoader("env", os.path.abspath("./.env")))
spec.loader.exec_module(env := module_from_spec(spec))
# Load all upper-case constants
env_map = {k:v for k,v in env.__dict__.items() if k==k.upper()}
domainname = env.DOMAINNAME
config_dir = env.CONFIGDIR

MANAGE_TRAEFIK_STATIC = env.CLOUDARR_MANAGE_TRAEFIK_STATIC.lower() == "true"
MANAGE_TRAEFIK_DYNAMIC = env.CLOUDARR_MANAGE_TRAEFIK_DYNAMIC.lower() == "true"
MANAGE_AUTHELIA = env.CLOUDARR_MANAGE_AUTHELIA.lower() == "true"
MANAGE_HOMEPAGE_SERVICES = env.CLOUDARR_MANAGE_HOMEPAGE_SERVICES.lower() == "true"
MANAGE_HOMEPAGE_SETTINGS = env.CLOUDARR_MANAGE_HOMEPAGE_SETTINGS.lower() == "true"
MANAGE_GUACAMOLE_INITDB = env.CLOUDARR_MANAGE_GUACAMOLE_INITDB.lower() == "true"

try:
  with open("./cloudarr-config.yml", 'r') as stream:
    cloudarr_vars = yaml.safe_load(stream)
except Exception as e:
  print(traceback.format_exc())
  raise ValueError(f"Error loading cloudarr-config.yml - {e}")
# print(json.dumps(cloudarr_vars, indent=2))

loaded_layout = cloudarr_vars["homepage"]["layout"]
loaded_services = cloudarr_vars["services"]
loaded_rules = []

for prefix, conf in loaded_services.items():
  if (ac := conf.get("access_control")):
    rules = {}
    for rule in ac:
      k,v = rule.split(":")
      rules[k]=v
    if not rules.get("admins"): # anti-lockout
      rules = {**{"admins":"one_factor"}, **rules}
    if not rules.get("everybody"):
      rules = {**rules, **{"everybody":"deny"}}
    for group, policy in rules.items():
      loaded_rules.append({
        "domain":f"{prefix}.{domainname}",
        "subject":[f"group:{group}"],
        "policy": policy
      })

homepage_services = []
homepage_layout = {}
homepage_settings = deepcopy(cloudarr_vars["homepage"])
homepage_settings["layout"]=homepage_layout

for conf in loaded_layout:
  category = list(conf.keys())[0]
  config = conf.get("config", {})
  items = conf.get("items", {})
  category_services = []
  homepage_layout[category] = config
  for prefix in items:
    service = loaded_services.get(prefix, {})
    if not service:
      print("Non-fatal error getting service info for ", prefix)
      print("Skipping")
      continue
    info = str(service.get("info", "false")).lower() == "true"

    route = service.get("route")
    if not info:
      serv = {
        "href": f"https://{prefix}.{domainname}",
        "description": service.get("description", ""),
      }
    else:
      serv = {}

    if not route and not info: # For services without a supplied route, assume docker
      serv.update({"container": prefix})

    if (icon := service.get("icon")):
      serv["icon"] = icon
    siteMonitor = service.get("siteMonitor")
    healthcheck = str(service.get("healthCheck", "true")).lower() == "true"
    
    if not siteMonitor and healthcheck and not info:
      siteMonitor = route
    if siteMonitor:
      serv["siteMonitor"] = siteMonitor
    if (widget := service.get("widget")):
      serv["widget"] = widget

    service_name = service.get("name") or prefix
    category_services.append({service_name: serv})
  homepage_services.append({category: category_services})



if MANAGE_AUTHELIA:
  authelia_config = cloudarr_vars["authelia"]
  authelia_config["access_control"]["rules"].extend(loaded_rules)
  with open(f"{config_dir}/authelia/configuration.yml", "w+") as f:
    yaml.dump(authelia_config, f, default_flow_style=False, sort_keys=False)
  apply_env(f"{config_dir}/authelia/configuration.yml")

if MANAGE_TRAEFIK_STATIC:
  traefik_config = cloudarr_vars["traefik"]
  with open(f"{config_dir}/traefik/traefik.yml", "w+") as f:
    yaml.dump(traefik_config, f, default_flow_style=False, sort_keys=False)
  apply_env(f"{config_dir}/traefik/traefik.yml")

if MANAGE_TRAEFIK_DYNAMIC: 
  dyn_config = cloudarr_vars["traefik-dynamic"]
  if not dyn_config.get("routers"):
    dyn_config["http"]["routers"]={}
  if not dyn_config.get("services"):
    dyn_config["http"]["services"]={}

  for prefix, conf in loaded_services.items():
    if not (route:=conf.get("route")):
      continue

    tls_version = conf.get("tls", "modern")
    insecure = not route.lower().startswith("https")
    skip_certificate = not conf.get("check_certificate", True)

    router = {
      "entrypoints":["https"],
      "rule": f"Host(`{prefix}.{domainname}`)",
      "service": prefix,
      "middlewares": "securityHeaders",
      "tls": {
        "options": f"{tls_version}@file",
        "certResolver": "cloudflare",
        "domains": [{
          "main":"brewtools.dev",
          "sans":["*.brewtools.dev"]
        }]
      }
    }
    dyn_config["http"]["routers"][prefix]=router

    service = {
      "loadBalancer": {
        "servers":[{"url":route}]
      }
    }
    if insecure or skip_certificate:
      service["loadBalancer"]["serversTransport"]="insecureTransport"
    dyn_config["http"]["services"][prefix]=service

  with open(f"{config_dir}/traefik/dynamic-config.yml", "w+") as f:
    yaml.dump(dyn_config, f, default_flow_style=False, sort_keys=False)
  apply_env(f"{config_dir}/traefik/dynamic-config.yml")


if MANAGE_HOMEPAGE_SETTINGS:
  with open(f"{config_dir}/homepage/settings.yaml", "w+") as f:
    yaml.dump(homepage_settings, f, default_flow_style=False, sort_keys=False)
  apply_env(f"{config_dir}/homepage/settings.yaml")

if MANAGE_HOMEPAGE_SERVICES:
  with open(f"{config_dir}/homepage/services.yaml", "w+") as f:
    yaml.dump(homepage_services, f, default_flow_style=False, sort_keys=False)
  apply_env(f"{config_dir}/homepage/services.yaml")

def replace_from_marker(file_path, marker, new_content):
  with open(file_path, 'r') as file:
    lines = file.readlines()

  # Find first instance
  for i, line in enumerate(lines):
    if marker in line:
      marker_index = i
      break
  else:
      print(f"Marker '{marker}' not found in the file.")
      return

  # Replace from the marker to eof
  with open(file_path, 'w') as file:
    file.writelines(lines[:marker_index-1])
    file.write(new_content)


if MANAGE_GUACAMOLE_INITDB:
  # Patch guac initdb
  initdb = """
-- Create default user "admin" with an invalid password to disable local login
INSERT INTO guacamole_entity (name, type) VALUES ('admin', 'USER');
INSERT INTO guacamole_user (entity_id, password_hash, password_salt, password_date)
SELECT
    entity_id,
    decode('1231231231231231231231231231231231231231231231231231231231231231', 'hex'),  -- Intentionally invalid
    decode('FE24ADC5E11E2B25288D1704ABE67A79E342ECC26064CE69C5B3177795A82264', 'hex'),
    CURRENT_TIMESTAMP
FROM guacamole_entity WHERE name = 'admin' AND guacamole_entity.type = 'USER';

-- Grant this user all system permissions
INSERT INTO guacamole_system_permission (entity_id, permission)
SELECT entity_id, permission::guacamole_system_permission_type
FROM (
    VALUES
        ('admin', 'CREATE_CONNECTION'),
        ('admin', 'CREATE_CONNECTION_GROUP'),
        ('admin', 'CREATE_SHARING_PROFILE'),
        ('admin', 'CREATE_USER'),
        ('admin', 'CREATE_USER_GROUP'),
        ('admin', 'ADMINISTER')
) permissions (username, permission)
JOIN guacamole_entity ON permissions.username = guacamole_entity.name AND guacamole_entity.type = 'USER';

-- Grant admin permission to read/update/administer self
INSERT INTO guacamole_user_permission (entity_id, affected_user_id, permission)
SELECT guacamole_entity.entity_id, guacamole_user.user_id, permission::guacamole_object_permission_type
FROM (
    VALUES
        ('admin', 'admin', 'READ'),
        ('admin', 'admin', 'UPDATE'),
        ('admin', 'admin', 'ADMINISTER')
) permissions (username, affected_username, permission)
JOIN guacamole_entity          ON permissions.username = guacamole_entity.name AND guacamole_entity.type = 'USER'
JOIN guacamole_entity affected ON permissions.affected_username = affected.name AND guacamole_entity.type = 'USER'
JOIN guacamole_user            ON guacamole_user.entity_id = affected.entity_id;
"""
  file_path = os.path.join(config_dir, "guacamole/postgres/init/initdb.sql")
  replace_from_marker(file_path, '-- Create default user', initdb)